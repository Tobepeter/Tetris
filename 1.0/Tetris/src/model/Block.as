package model {

	public class Block {
		/**
		 * 构造函数
		 * @param type 砖块类型  【BlockType.TYPE1-BlockType.TYPE6】
		 * @param dir 砖块方向     【DIRARR[0]-DIRARR[3]】
		 */
		public var type:Number;
		public var dir:Number;

		public function Block(type:Number, dir:Number) {
			this.type = type;
			this.dir = dir;
		}

		/***** 以下为砖块4个方向的数组 (四个方向 【1：原始， 2：逆时针90度 ，3：逆时针180度，4，逆时针270度】)*****/
		// 正方形
		public static const TYPE1ARR:Array = [[[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]],

			[[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]],

			[[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]],

			[[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]];

		// L形
		public static const TYPE2ARR:Array = [[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]],

			[[0, 0, 1, 0], [1, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 0]]];

		// L镜像形
		public static const TYPE3ARR:Array = [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 1, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 1, 1], [0, 0, 0, 0]]];

		// 横条形
		public static const TYPE4ARR:Array = [[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]],

			[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],

			[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]],

			[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]]];

		// S形
		public static const TYPE5ARR:Array = [[[0, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]],

			[[0, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]]];

		// S镜像
		public static const TYPE6ARR:Array = [[[0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 0]],

			[[0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]],

			[[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 0]]];
	
		// 土形
		public static const TYPE7ARR:Array = [[[0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
			
			[[0, 1, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]],
			
			[[1, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
			
			[[0, 1, 0, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]];
		
		// 总类型数组
		public static const ALLBLOCK:Array = [Block.TYPE1ARR, Block.TYPE2ARR, Block.TYPE3ARR, Block.TYPE4ARR, Block.TYPE5ARR, Block.TYPE6ARR, Block.TYPE7ARR];

		/**
		 * 获取指定数组
		 * @param type 类型
		 * @param dir 方向
		 * @desc 根据TYPEALLARR选出指定数组
		 */
		public static function getBlockArr(type:Number, dir:Number):Array {
			return Block.ALLBLOCK[type][dir];
		}
	}
}
